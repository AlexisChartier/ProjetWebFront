{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport let RegisterForm = /*#__PURE__*/(() => {\n  class RegisterForm {\n    constructor(authService, router, formBuilder) {\n      this.authService = authService;\n      this.router = router;\n      this.formBuilder = formBuilder;\n      this.textinput_placeholder2 = 'Mot de passe';\n      this.textinput_placeholder3 = 'Confirmer mot de passe';\n      this.textinput_placeholder4 = 'Adresse';\n      this.buttonC = 'Client';\n      this.buttonL = 'Livreur';\n      this.textinput_placeholder5 = 'Email';\n      this.textinput_placeholder = 'Nom';\n      this.textinput_placeholder1 = 'Prénom';\n      this.registerForm = new FormGroup({\n        nom: new FormControl('', Validators.required),\n        prenom: new FormControl('', Validators.required),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        adresse: new FormControl('', Validators.required),\n        motdepasse: new FormControl('', Validators.required),\n        confmdp: new FormControl('', Validators.required)\n      });\n      this.submitted = false;\n    }\n    // Raccourci pour accéder facilement aux contrôles du formulaire\n    get formControls() {\n      return this.registerForm.controls;\n    }\n    onSubmitClient() {\n      this.submitted = true;\n      console.log('here');\n      // Arrêtez-vous ici si le formulaire n'est pas valide\n      if (this.registerForm.invalid) {\n        return;\n      }\n      if (this.registerForm.value.motdepasse != this.registerForm.value.confmdp) {\n        return;\n      }\n      const user = {\n        client_id: null,\n        email: this.registerForm.value.email,\n        mot_de_passe: this.registerForm.value.motdepasse,\n        nom_client: this.registerForm.value.nom,\n        prenom_client: this.registerForm.value.prenom,\n        adresse_client: this.registerForm.value.adresse,\n        role: \"client\"\n      };\n      console.log(user);\n      this.authService.register(user);\n      this.router.navigate(['']);\n    }\n    onSubmitLivreur() {\n      this.submitted = true;\n      // Arrêtez-vous ici si le formulaire n'est pas valide\n      if (this.registerForm.invalid) {\n        return;\n      }\n      if (this.registerForm.value.motdepasse !== this.registerForm.value.confmdp) {\n        return;\n      }\n      const user = {\n        livreur_id: null,\n        email: this.registerForm.value.email,\n        mot_de_passe: this.registerForm.value.motdepasse,\n        nom_livreur: this.registerForm.value.nom,\n        prenom_livreur: this.registerForm.value.prenom,\n        adresse_livreur: this.registerForm.value.adresse,\n        role: \"livreur\"\n      };\n      console.log(user);\n      this.authService.register(user);\n      this.router.navigate(['']);\n    }\n  }\n  RegisterForm.ɵfac = function RegisterForm_Factory(t) {\n    return new (t || RegisterForm)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  RegisterForm.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterForm,\n    selectors: [[\"register-form\"]],\n    inputs: {\n      textinput_placeholder2: \"textinput_placeholder2\",\n      textinput_placeholder3: \"textinput_placeholder3\",\n      textinput_placeholder4: \"textinput_placeholder4\",\n      buttonC: \"buttonC\",\n      buttonL: \"buttonL\",\n      textinput_placeholder5: \"textinput_placeholder5\",\n      textinput_placeholder: \"textinput_placeholder\",\n      textinput_placeholder1: \"textinput_placeholder1\"\n    },\n    decls: 12,\n    vars: 9,\n    consts: [[1, \"register-form-register-form\"], [1, \"register-form-form\", 3, \"formGroup\"], [\"formControlName\", \"nom\", \"type\", \"text\", 1, \"input\"], [\"formControlName\", \"prenom\", \"type\", \"text\", 1, \"input\"], [\"formControlName\", \"motdepasse\", \"type\", \"password\", 1, \"input\"], [\"formControlName\", \"confmdp\", \"type\", \"password\", 1, \"input\"], [\"formControlName\", \"adresse\", \"type\", \"text\", 1, \"input\"], [\"formControlName\", \"email\", \"type\", \"email\", 1, \"input\"], [\"type\", \"button\", 1, \"button\", 3, \"click\"]],\n    template: function RegisterForm_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵelement(2, \"input\", 2)(3, \"input\", 3)(4, \"input\", 4)(5, \"input\", 5)(6, \"input\", 6)(7, \"input\", 7);\n        i0.ɵɵelementStart(8, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function RegisterForm_Template_button_click_8_listener() {\n          return ctx.onSubmitClient();\n        });\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function RegisterForm_Template_button_click_10_listener() {\n          return ctx.onSubmitLivreur();\n        });\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"placeholder\", ctx.textinput_placeholder);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"placeholder\", ctx.textinput_placeholder1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"placeholder\", ctx.textinput_placeholder2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"placeholder\", ctx.textinput_placeholder3);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"placeholder\", ctx.textinput_placeholder4);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"placeholder\", ctx.textinput_placeholder5);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.buttonC);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.buttonL);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\"[_nghost-%COMP%]{display:contents}.register-form-register-form[_ngcontent-%COMP%]{flex:1;width:100%;display:flex;position:relative;align-items:center;flex-direction:column;justify-content:center}.register-form-form[_ngcontent-%COMP%]{gap:var(--dl-space-space-oneandhalfunits);flex:1;width:100%;display:flex;max-width:-moz-fit-content;max-width:fit-content;min-width:auto;align-self:center;max-height:-moz-fit-content;max-height:fit-content;min-height:auto;align-items:center;margin-left:150px;padding-top:var(--dl-space-space-threeunits);margin-right:150px;padding-left:var(--dl-space-space-sevenunits);border-radius:var(--dl-radius-radius-radius8);padding-right:var(--dl-space-space-sevenunits);flex-direction:column;padding-bottom:var(--dl-space-space-unit);justify-content:center;background-color:var(--dl-color-gray-white)}\"]\n  });\n  return RegisterForm;\n})();","map":null,"metadata":{},"sourceType":"module"}