{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      return this.authService.isLoggedIn();\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();\nexport class AuthGuardVendeur {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isVendeur()) {\n      return true; // L'utilisateur est connecté, autoriser l'accès à la route\n    } else {\n      this.router.navigate(['/login']); // Rediriger vers la page de connexion si l'utilisateur n'est pas connecté\n      return false; // Bloquer l'accès à la route\n    }\n  }\n}\n\nexport let AuthGuardAdmin = /*#__PURE__*/(() => {\n  class AuthGuardAdmin {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      if (this.authService.isAdmin()) {\n        return true; // L'utilisateur est un administrateur, autoriser l'accès à la route\n      } else {\n        this.router.navigate(['/login']); // Rediriger vers la page de connexion si l'utilisateur n'est pas un administrateur\n        return false; // Bloquer l'accès à la route\n      }\n    }\n  }\n\n  AuthGuardAdmin.ɵfac = function AuthGuardAdmin_Factory(t) {\n    return new (t || AuthGuardAdmin)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  AuthGuardAdmin.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardAdmin,\n    factory: AuthGuardAdmin.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuardAdmin;\n})();\nexport let AuthGuardClient = /*#__PURE__*/(() => {\n  class AuthGuardClient {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      if (this.authService.isClient()) {\n        return true; // L'utilisateur est un client, autoriser l'accès à la route\n      } else {\n        this.router.navigate(['/login']); // Rediriger vers la page de connexion si l'utilisateur n'est pas un client\n        return false; // Bloquer l'accès à la route\n      }\n    }\n  }\n\n  AuthGuardClient.ɵfac = function AuthGuardClient_Factory(t) {\n    return new (t || AuthGuardClient)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  AuthGuardClient.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardClient,\n    factory: AuthGuardClient.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuardClient;\n})();\nexport let AuthGuardLivreur = /*#__PURE__*/(() => {\n  class AuthGuardLivreur {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      if (this.authService.isLivreur()) {\n        return true; // L'utilisateur est un livreur, autoriser l'accès à la route\n      } else {\n        this.router.navigate(['/login']); // Rediriger vers la page de connexion si l'utilisateur n'est pas un livreur\n        return false; // Bloquer l'accès à la route\n      }\n    }\n  }\n\n  AuthGuardLivreur.ɵfac = function AuthGuardLivreur_Factory(t) {\n    return new (t || AuthGuardLivreur)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  AuthGuardLivreur.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardLivreur,\n    factory: AuthGuardLivreur.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuardLivreur;\n})();","map":null,"metadata":{},"sourceType":"module"}