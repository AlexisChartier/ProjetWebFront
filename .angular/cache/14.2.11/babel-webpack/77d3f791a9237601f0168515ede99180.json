{"ast":null,"code":"import * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./client.service\";\nimport * as i2 from \"./livreur.service\";\nimport * as i3 from \"./admin.service\";\nimport * as i4 from \"./vendeur.service\";\nimport * as i5 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(clientService, livreurService, adminService, vendeurService, router) {\n      this.clientService = clientService;\n      this.livreurService = livreurService;\n      this.adminService = adminService;\n      this.vendeurService = vendeurService;\n      this.router = router;\n      this.key = CryptoJS.enc.Utf8.parse(\"1aBcDeFgHiJkLmNo\");\n    }\n    get produitIdEdit() {\n      return this._produitIdEdit;\n    }\n    set produitIdEdit(value) {\n      this._produitIdEdit = value;\n    }\n    get clientIdEdit() {\n      return this._clientIdEdit;\n    }\n    set clientIdEdit(value) {\n      this._clientIdEdit = value;\n    }\n    get livreurIdEdit() {\n      return this._livreurIdEdit;\n    }\n    set livreurIdEdit(value) {\n      this._livreurIdEdit = value;\n    }\n    get magasinIdEdit() {\n      return this._magasinIdEdit;\n    }\n    set magasinIdEdit(value) {\n      this._magasinIdEdit = value;\n    }\n    get vendeurIdEdit() {\n      return this._vendeurIdEdit;\n    }\n    set vendeurIdEdit(value) {\n      this._vendeurIdEdit = value;\n    }\n    get currentUserId() {\n      return this._currentUserId;\n    }\n    set currentUserId(value) {\n      this._currentUserId = value;\n    }\n    getMagasinIdVendeur() {\n      return this._magasinIdVendeur;\n    }\n    setMagasinIdVendeur(value) {\n      this._magasinIdVendeur = value;\n    }\n    setCurrentUser(user) {\n      this.currentUser = user;\n    }\n    setMagasinDetailId(id) {\n      this.magasinDetailId = id;\n    }\n    getMagasinDetailId() {\n      return this.magasinDetailId;\n    }\n    encryptPassword(plainPassword) {\n      const encrypted = CryptoJS.AES.encrypt(plainPassword, this.key, {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7 // Mode de padding\n      });\n\n      return encrypted.toString();\n    }\n    decryptPassword(encryptedPassword) {\n      const decrypted = CryptoJS.AES.decrypt(encryptedPassword, this.key, {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7 // Mode de padding\n      });\n\n      return decrypted.toString(CryptoJS.enc.Utf8);\n    }\n    register(user) {\n      if (user.role === \"client\") {\n        this.encPassword = this.encryptPassword(user.mot_de_passe);\n        console.log(this.encPassword);\n        user.mot_de_passe = this.encPassword;\n        this.clientService.addClient(user).subscribe({\n          next: response => {\n            console.log(response);\n          },\n          error: error => console.log(error)\n        });\n        return true;\n      } else if (user.role === \"livreur\") {\n        this.encPassword = this.encryptPassword(user.mot_de_passe);\n        user.mot_de_passe = this.encPassword;\n        this.livreurService.addLivreur(user).subscribe({\n          next: response => {\n            console.log(response);\n          },\n          error: error => console.log(error)\n        });\n        return true;\n      } else {\n        return false;\n      }\n    }\n    logIn(username, password) {\n      this.adminService.getAdminByEmail(username).subscribe({\n        next: response => {\n          this.currentUser = response;\n          console.log(response);\n          this.decPassword = response.mot_de_passe;\n          this.roleUser = response.role;\n          if (this.decPassword === password) {\n            this.router.navigate(['/', 'monitoring-page-read']);\n            return true;\n          } else {\n            this.logout();\n            return false;\n          }\n        },\n        error: error => console.log(error)\n      });\n      this.clientService.getClientByEmail(username).subscribe({\n        next: response => {\n          this.currentUser = response;\n          console.log(response);\n          this.decPassword = this.decryptPassword(response.mot_de_passe);\n          this.roleUser = response.role;\n          if (this.decPassword === password) {\n            this.router.navigate(['/', 'order']);\n            return true;\n          } else {\n            this.logout();\n            return false;\n          }\n        },\n        error: error => console.log(error)\n      });\n      this.livreurService.getLivreurByEmail(username).subscribe({\n        next: response => {\n          this.currentUser = response;\n          console.log(response);\n          this.decPassword = this.decryptPassword(response.mot_de_passe);\n          this.roleUser = response.role;\n          if (this.decPassword === password) {\n            this.router.navigate(['/', 'livreur']);\n            return true;\n          } else {\n            this.logout();\n            return false;\n          }\n        },\n        error: error => console.log(error)\n      });\n      this.vendeurService.getVendeurByEmail(username).subscribe({\n        next: response => {\n          this.currentUser = response;\n          this.decPassword = response.mot_de_passe;\n          this.roleUser = response.role;\n          if (this.decPassword === password) {\n            this._magasinIdVendeur = response.magasin_id;\n            this.router.navigate(['/', 'vendeur-page']);\n            return true;\n          } else {\n            this.logout();\n            return false;\n          }\n        },\n        error: error => console.log(error)\n      });\n      console.log(this.decPassword + \" \" + password);\n      /*if(this.decPassword === password){\r\n        return true\r\n      }\r\n      else {\r\n        this.logout()\r\n        return false;\r\n      }*/\n      return false;\n    }\n    // Méthode pour vérifier si l'utilisateur est connecté\n    isLoggedIn() {\n      return !!this.currentUser; // Vérifie si currentUser est défini\n    }\n    // Méthode pour vérifier si l'utilisateur est un client\n    isClient() {\n      return this.isLoggedIn() && this.roleUser === 'client';\n    }\n    // Méthode pour vérifier si l'utilisateur est un livreur\n    isLivreur() {\n      return this.isLoggedIn() && this.roleUser === 'livreur';\n    }\n    // Méthode pour vérifier si l'utilisateur est un vendeur\n    isVendeur() {\n      return this.isLoggedIn() && this.roleUser === 'vendeur';\n    }\n    // Méthode pour vérifier si l'utilisateur est un administrateur\n    isAdmin() {\n      return this.isLoggedIn() && this.roleUser === 'administrateur';\n    }\n    // Méthode pour déconnecter l'utilisateur\n    logout() {\n      this.currentUser = null;\n      // Ajoutez ici le code pour effectuer les opérations de déconnexion appropriées, par exemple, supprimer les jetons d'authentification, vider le cache, etc.\n    }\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.ClientService), i0.ɵɵinject(i2.LivreurService), i0.ɵɵinject(i3.AdminService), i0.ɵɵinject(i4.VendeurService), i0.ɵɵinject(i5.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}